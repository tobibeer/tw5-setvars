created: 20151209131525981
creator: Tobias Beer
modified: 20160103124626927
modifier: Tobias Beer
tags: 
title: setvars-Syntax
type: text/vnd.tiddlywiki

Using the ''setvars'' widget is straight forward. For each desired variable, simply declare:

; 1. Variable Attributes
: prefixed with an underscore `_` and eventually replaced in the variable declaration:<br>`_bar="hello" _baz={{!!title}}`
; 2. The Variable Declaration
: specify which attributes and literals make up the variable:<br>`foo="bar baz"`
: may contain literals enclosed in backslashes<br>`foo="bar \I will be a literal\ baz"`

All put together, this is the result of it:

<$macrocall $name="`" text="""<$setvars _foo="hello" _bar={{!!title}} baz="foo \ \ bar">
<<baz>>
</$setvars>
"""/>

@@.note
''Note:'' You can address a variable previously defined in the same ''setvars'' instance by its name. Therefore, avoid using the same name for a variable and an attribute.
@@

!! Conditionals

The widget allows to evaluate basic conditional statements and set variables accordingly. For details see [[conditionals|setvars-Conditionals]].

!! Variable Declaration

The attributes you wish to use in a variable declaration can be interpreted in a number of ways, in general either literal, as a value or as a filter:

; literal
: `\<literal-text>\`
; value
: `<text-attribute>[<start>,<length>][<empty>]`
; filter
: `[<filter-attribute>[<start>,<length>][<empty>][<joiner>]]`

Whereas __all__ `<options>` are, well, optional.

!! Syntax Examples

Here's how you can use the above to construct variable declarations:

; \ text \
: returns the literal ` text `, with leading and trailing white-space @@.demo-items '' text ''@@
; foo
: refers to the attribute ''_foo'' and its value @@.demo-items ''a b c d e''@@
; [foo]
: evaluates ''_foo'' as a filter expression @@.demo-items ''a b c d e''@@
; foo[1]
: parses''_foo'' as a list and returns the first item@@.demo-items ''a'' b c d e@@
; [foo[1]]
: evaluates ''_foo'' as a filter and returns the first item@@.demo-items ''a'' b c d e@@
; foo[2]
: returns only the 2nd item@@.demo-items a ''b'' c d e@@
; foo[2][fallback]
: returns the 2nd item or `fallback` if that is undefined@@.demo-items a ''b'' c d e@@
; [foo[3][empty]]
: evaluates as a filter and returns the 3rd item or `empty` if undefined@@.demo-items a b ''c'' d e@@
; [foo[][][ ]]
: evaluates as a filter and joins all items with an empty string@@.demo-items ''a b c d e''@@
; [foo[][][ - ]]
: evaluates as a filter and joins all items with ` - `@@.demo-items ''a - b - c - d - e''@@
; foo[n]
: parses''_foo'' as a list and returns the last item, as does ''foo[-1]''@@.demo-items a b c d ''e''@@
; [foo[n]]
: evaluates ''_foo'' as a filter and returns the last item as above @@.demo-items a b c d ''e''@@
; foo[2,3]
: returns 3 items, starting from the second@@.demo-items a ''b c d'' e@@
; foo[n,-2]
: returns 2 items, starting from the last, going backwards@@.demo-items a b c ''d e''@@
:: the last two items, so to speak
; foo[-3]
: returns the third last item@@.demo-items a b ''c'' d e@@
; [foo[-3,2]]
: evaluates as a filter and returns two items, starting with the third last item@@.demo-items a b ''c d'' e@@
; foo[-3,-2]
: returns two items, starting with the third last item, going backwards@@.demo-items a ''b c'' d e@@
; foo[-3,n]
: returns however many items there are from the third last to the end@@.demo-items a b ''c d e''@@
; foo[-3,-n]
: returns however many items there are from the first to the third last@@.demo-items ''a b c'' d e@@
; foo[3,-n]
: is actually the same as ''foo[1,3]''@@.demo-items ''a b c'' d e@@
; foo[-n]
: don't be weird, just use ''foo[1]''@@.demo-items ''a'' b c d e@@

<style>
.demo-items {
float:right;
color: #ccc;
}
.demo-items strong{
color: #909;
}
</style>